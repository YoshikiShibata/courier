syntax = "proto3";

package yoshikishibata.courier.example.api.shop.v1;

import "validate/validate.proto";

option go_package = "/shop_v1";

/**
 * Shopサービスは、サンプルサービスとしての簡易的な機能を定義しています。
 *
 * [共通] すべてのエンドポイントに対して共通の振る舞いです。
 * - サンプルサービスとしては、認証機能は定義していませんので、
 *   Unauthenticatedエラーは返されません。
 * - すべてのエンドポイントで、DeadlineExceededおよびCanceledのエラーが
 *   返されます。
 * - Internalエラーは、サービス側の問題を示しており、明記されていません。
 */
service Shop {
  // 扱っている商品一覧を返します。
  rpc ListProductInventories(ListProductInventoriesRequest)
      returns (ListProductInventoriesResponse) {}
  // 注文を作成して発送処理をします。
  rpc CreateOrder(CreateOrderRequest) returns (CreateOrderResponse) {}
  // 発送ステータスを返します。
  rpc GetShippingStatus(GetShippingStatusRequest)
      returns (GetShippingStatusResponse) {}
}

message ProductInventory {
  // 商品番号
  string number = 1;
  // 商品名
  string name = 2;
  // 価格（円）
  uint32 price = 3;
  // 在庫数
  uint32 quantity_available = 4;
}

/**
 * ListProductInventoriesは、扱っている商品の一覧を返します。
 * - num_of_productsは、一覧として返す最大個数を指定します。
 *
 * page_tokenには、空文字列もしくはレスポンスで返されるnext_page_tokenを
 * 設定します。
 * - 空文字列の場合は、商品一覧の最初から返されます。
 * - 商品一覧は、nameのアルファベット順に昇順に返されます。
 *
 * [エラー]
 * - InvalidArgument:
 *   - num_of_productsが0
 *   - page_tokenが不正な値
 */
message ListProductInventoriesRequest {
  uint32 num_of_products = 1 [(validate.rules).uint32.gte = 1];
  string page_token = 2;
}

message ListProductInventoriesResponse {
  repeated ProductInventory product_inventories = 1;
  // 商品がさらに存在しない場合、空文字列が返されます。
  string next_page_token = 2;
}

/**
 * CreateOrderは、指定された商品の購入処理を行い、出荷します。
 *
 * [エラー]
 * - InvalidArgument:
 *   - numberが空文字列
 *   - num_of_itemsが0
 *   - shipping_addressが空文字列
 * - NotFound:
 *   - numberで指定された商品は扱っていない
 * - FailedPrecondition:
 *   - 指定された個数の商品在庫がない
 */
message CreateOrderRequest {
  // 商品番号
  string product_number = 1;
  // 個数
  uint32 num_of_items = 2;
  // 送付先
  string shipping_address = 3;
}

message CreateOrderResponse {
  // 注文番号
  string order_id = 1;
}

/**
 * GetShippingStatusは、order_idで指定された商品の出荷状況を返します。
 *
 * [エラー]
 * - InvalidArgument:
 *   - order_idが空文字列
 * - NotFound:
 *   - order_idで指定された注文がない
 */
message GetShippingStatusRequest { string order_id = 1; }

message GetShippingStatusResponse {
  enum Status {
    UNSPECIFIED = 0;
    // 準備中
    PREPARING = 1;
    // 出荷済み
    SHIPPED = 2;
    // 配達済み
    DELIVERED = 3;
  }

  string order_id = 1;
  Status status = 2;
}
