// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: proto/warehouse/v1/warehouse.proto

package warehouse_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WarehouseClient is the client API for Warehouse service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WarehouseClient interface {
	ListProductInventories(ctx context.Context, in *ListProductInventoriesRequest, opts ...grpc.CallOption) (*ListProductInventoriesResponse, error)
	ShipProduct(ctx context.Context, in *ShipProductRequest, opts ...grpc.CallOption) (*ShipProductResponse, error)
}

type warehouseClient struct {
	cc grpc.ClientConnInterface
}

func NewWarehouseClient(cc grpc.ClientConnInterface) WarehouseClient {
	return &warehouseClient{cc}
}

func (c *warehouseClient) ListProductInventories(ctx context.Context, in *ListProductInventoriesRequest, opts ...grpc.CallOption) (*ListProductInventoriesResponse, error) {
	out := new(ListProductInventoriesResponse)
	err := c.cc.Invoke(ctx, "/yoshikishibata.courier.example.api.warehouse.v1.Warehouse/ListProductInventories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *warehouseClient) ShipProduct(ctx context.Context, in *ShipProductRequest, opts ...grpc.CallOption) (*ShipProductResponse, error) {
	out := new(ShipProductResponse)
	err := c.cc.Invoke(ctx, "/yoshikishibata.courier.example.api.warehouse.v1.Warehouse/ShipProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WarehouseServer is the server API for Warehouse service.
// All implementations must embed UnimplementedWarehouseServer
// for forward compatibility
type WarehouseServer interface {
	ListProductInventories(context.Context, *ListProductInventoriesRequest) (*ListProductInventoriesResponse, error)
	ShipProduct(context.Context, *ShipProductRequest) (*ShipProductResponse, error)
	mustEmbedUnimplementedWarehouseServer()
}

// UnimplementedWarehouseServer must be embedded to have forward compatible implementations.
type UnimplementedWarehouseServer struct {
}

func (UnimplementedWarehouseServer) ListProductInventories(context.Context, *ListProductInventoriesRequest) (*ListProductInventoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProductInventories not implemented")
}
func (UnimplementedWarehouseServer) ShipProduct(context.Context, *ShipProductRequest) (*ShipProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShipProduct not implemented")
}
func (UnimplementedWarehouseServer) mustEmbedUnimplementedWarehouseServer() {}

// UnsafeWarehouseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WarehouseServer will
// result in compilation errors.
type UnsafeWarehouseServer interface {
	mustEmbedUnimplementedWarehouseServer()
}

func RegisterWarehouseServer(s grpc.ServiceRegistrar, srv WarehouseServer) {
	s.RegisterService(&Warehouse_ServiceDesc, srv)
}

func _Warehouse_ListProductInventories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProductInventoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).ListProductInventories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yoshikishibata.courier.example.api.warehouse.v1.Warehouse/ListProductInventories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).ListProductInventories(ctx, req.(*ListProductInventoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Warehouse_ShipProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShipProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WarehouseServer).ShipProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yoshikishibata.courier.example.api.warehouse.v1.Warehouse/ShipProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WarehouseServer).ShipProduct(ctx, req.(*ShipProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Warehouse_ServiceDesc is the grpc.ServiceDesc for Warehouse service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Warehouse_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yoshikishibata.courier.example.api.warehouse.v1.Warehouse",
	HandlerType: (*WarehouseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProductInventories",
			Handler:    _Warehouse_ListProductInventories_Handler,
		},
		{
			MethodName: "ShipProduct",
			Handler:    _Warehouse_ShipProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/warehouse/v1/warehouse.proto",
}
