// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/warehouse/v1/warehouse.proto

package warehouse_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ProductInventory with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ProductInventory) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProductInventory with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProductInventoryMultiError, or nil if none found.
func (m *ProductInventory) ValidateAll() error {
	return m.validate(true)
}

func (m *ProductInventory) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	// no validation rules for Name

	// no validation rules for Price

	// no validation rules for QuantityAvailable

	if len(errors) > 0 {
		return ProductInventoryMultiError(errors)
	}

	return nil
}

// ProductInventoryMultiError is an error wrapping multiple validation errors
// returned by ProductInventory.ValidateAll() if the designated constraints
// aren't met.
type ProductInventoryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProductInventoryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProductInventoryMultiError) AllErrors() []error { return m }

// ProductInventoryValidationError is the validation error returned by
// ProductInventory.Validate if the designated constraints aren't met.
type ProductInventoryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProductInventoryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProductInventoryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProductInventoryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProductInventoryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProductInventoryValidationError) ErrorName() string { return "ProductInventoryValidationError" }

// Error satisfies the builtin error interface
func (e ProductInventoryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProductInventory.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProductInventoryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProductInventoryValidationError{}

// Validate checks the field values on ListProductInventoriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductInventoriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductInventoriesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProductInventoriesRequestMultiError, or nil if none found.
func (m *ListProductInventoriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductInventoriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NumOfProducts

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListProductInventoriesRequestMultiError(errors)
	}

	return nil
}

// ListProductInventoriesRequestMultiError is an error wrapping multiple
// validation errors returned by ListProductInventoriesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListProductInventoriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductInventoriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductInventoriesRequestMultiError) AllErrors() []error { return m }

// ListProductInventoriesRequestValidationError is the validation error
// returned by ListProductInventoriesRequest.Validate if the designated
// constraints aren't met.
type ListProductInventoriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductInventoriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductInventoriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductInventoriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductInventoriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductInventoriesRequestValidationError) ErrorName() string {
	return "ListProductInventoriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductInventoriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductInventoriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductInventoriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductInventoriesRequestValidationError{}

// Validate checks the field values on ListProductInventoriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProductInventoriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProductInventoriesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListProductInventoriesResponseMultiError, or nil if none found.
func (m *ListProductInventoriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProductInventoriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProductInventories() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProductInventoriesResponseValidationError{
						field:  fmt.Sprintf("ProductInventories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProductInventoriesResponseValidationError{
						field:  fmt.Sprintf("ProductInventories[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProductInventoriesResponseValidationError{
					field:  fmt.Sprintf("ProductInventories[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListProductInventoriesResponseMultiError(errors)
	}

	return nil
}

// ListProductInventoriesResponseMultiError is an error wrapping multiple
// validation errors returned by ListProductInventoriesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListProductInventoriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProductInventoriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProductInventoriesResponseMultiError) AllErrors() []error { return m }

// ListProductInventoriesResponseValidationError is the validation error
// returned by ListProductInventoriesResponse.Validate if the designated
// constraints aren't met.
type ListProductInventoriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProductInventoriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProductInventoriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProductInventoriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProductInventoriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProductInventoriesResponseValidationError) ErrorName() string {
	return "ListProductInventoriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProductInventoriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProductInventoriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProductInventoriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProductInventoriesResponseValidationError{}

// Validate checks the field values on ShipProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShipProductRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShipProductRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShipProductRequestMultiError, or nil if none found.
func (m *ShipProductRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShipProductRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	// no validation rules for Number

	// no validation rules for NumOfItems

	// no validation rules for ShippingAddress

	if len(errors) > 0 {
		return ShipProductRequestMultiError(errors)
	}

	return nil
}

// ShipProductRequestMultiError is an error wrapping multiple validation errors
// returned by ShipProductRequest.ValidateAll() if the designated constraints
// aren't met.
type ShipProductRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShipProductRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShipProductRequestMultiError) AllErrors() []error { return m }

// ShipProductRequestValidationError is the validation error returned by
// ShipProductRequest.Validate if the designated constraints aren't met.
type ShipProductRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipProductRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipProductRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipProductRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipProductRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipProductRequestValidationError) ErrorName() string {
	return "ShipProductRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShipProductRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipProductRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipProductRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipProductRequestValidationError{}

// Validate checks the field values on ShipProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShipProductResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShipProductResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShipProductResponseMultiError, or nil if none found.
func (m *ShipProductResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShipProductResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShippingId

	if len(errors) > 0 {
		return ShipProductResponseMultiError(errors)
	}

	return nil
}

// ShipProductResponseMultiError is an error wrapping multiple validation
// errors returned by ShipProductResponse.ValidateAll() if the designated
// constraints aren't met.
type ShipProductResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShipProductResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShipProductResponseMultiError) AllErrors() []error { return m }

// ShipProductResponseValidationError is the validation error returned by
// ShipProductResponse.Validate if the designated constraints aren't met.
type ShipProductResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShipProductResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShipProductResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShipProductResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShipProductResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShipProductResponseValidationError) ErrorName() string {
	return "ShipProductResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ShipProductResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShipProductResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShipProductResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShipProductResponseValidationError{}
