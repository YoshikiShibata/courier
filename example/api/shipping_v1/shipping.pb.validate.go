// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: proto/shipping/v1/shipping.proto

package shipping_v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateShippingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShippingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShippingRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShippingRequestMultiError, or nil if none found.
func (m *CreateShippingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShippingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return CreateShippingRequestMultiError(errors)
	}

	return nil
}

// CreateShippingRequestMultiError is an error wrapping multiple validation
// errors returned by CreateShippingRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateShippingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShippingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShippingRequestMultiError) AllErrors() []error { return m }

// CreateShippingRequestValidationError is the validation error returned by
// CreateShippingRequest.Validate if the designated constraints aren't met.
type CreateShippingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShippingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShippingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShippingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShippingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShippingRequestValidationError) ErrorName() string {
	return "CreateShippingRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShippingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShippingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShippingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShippingRequestValidationError{}

// Validate checks the field values on CreateShippingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateShippingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateShippingResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateShippingResponseMultiError, or nil if none found.
func (m *CreateShippingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateShippingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShippingId

	if len(errors) > 0 {
		return CreateShippingResponseMultiError(errors)
	}

	return nil
}

// CreateShippingResponseMultiError is an error wrapping multiple validation
// errors returned by CreateShippingResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateShippingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateShippingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateShippingResponseMultiError) AllErrors() []error { return m }

// CreateShippingResponseValidationError is the validation error returned by
// CreateShippingResponse.Validate if the designated constraints aren't met.
type CreateShippingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateShippingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateShippingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateShippingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateShippingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateShippingResponseValidationError) ErrorName() string {
	return "CreateShippingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateShippingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateShippingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateShippingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateShippingResponseValidationError{}

// Validate checks the field values on ShippingStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShippingStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShippingStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShippingStatusRequestMultiError, or nil if none found.
func (m *ShippingStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ShippingStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShippingId

	if len(errors) > 0 {
		return ShippingStatusRequestMultiError(errors)
	}

	return nil
}

// ShippingStatusRequestMultiError is an error wrapping multiple validation
// errors returned by ShippingStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type ShippingStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShippingStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShippingStatusRequestMultiError) AllErrors() []error { return m }

// ShippingStatusRequestValidationError is the validation error returned by
// ShippingStatusRequest.Validate if the designated constraints aren't met.
type ShippingStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShippingStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShippingStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShippingStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShippingStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShippingStatusRequestValidationError) ErrorName() string {
	return "ShippingStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ShippingStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShippingStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShippingStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShippingStatusRequestValidationError{}

// Validate checks the field values on ShippingStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ShippingStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ShippingStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ShippingStatusResponseMultiError, or nil if none found.
func (m *ShippingStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ShippingStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ShippidId

	// no validation rules for Status

	if len(errors) > 0 {
		return ShippingStatusResponseMultiError(errors)
	}

	return nil
}

// ShippingStatusResponseMultiError is an error wrapping multiple validation
// errors returned by ShippingStatusResponse.ValidateAll() if the designated
// constraints aren't met.
type ShippingStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ShippingStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ShippingStatusResponseMultiError) AllErrors() []error { return m }

// ShippingStatusResponseValidationError is the validation error returned by
// ShippingStatusResponse.Validate if the designated constraints aren't met.
type ShippingStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ShippingStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ShippingStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ShippingStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ShippingStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ShippingStatusResponseValidationError) ErrorName() string {
	return "ShippingStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ShippingStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sShippingStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ShippingStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ShippingStatusResponseValidationError{}
